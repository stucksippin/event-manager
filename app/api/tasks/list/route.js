import { NextResponse } from 'next/server'
import { getServerSession } from 'next-auth/next'
import { authOptions } from '../../auth/[...nextauth]/auth.config'
import prisma from '@/libs/prisma'

export async function GET(req) {
  try {
    // 1) –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const session = await getServerSession(authOptions)
    if (!session) {
      return NextResponse.json({ error: 'Not authenticated' }, { status: 401 })
    }
    const userId = session.user.id

    // 2) –ß–∏—Ç–∞–µ–º ID –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏–∑ query
    const url = new URL(req.url)
    const calendarId = url.searchParams.get('calendarId')
    if (!calendarId) {
      return NextResponse.json({ error: 'calendarId is required' }, { status: 400 })
    }

    // 3) –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–º—É –∫–∞–ª–µ–Ω–¥–∞—Ä—é
    const calendar = await prisma.calendar.findUnique({
      where: { id: calendarId },
      select: { type: true, ownerId: true, members: { select: { id: true } } }
    })
    if (!calendar) {
      return NextResponse.json({ error: 'Calendar not found' }, { status: 404 })
    }
    const isOwner = calendar.ownerId === userId
    const isMember = calendar.type === 'team' && calendar.members.some(m => m.id === userId)
    if (!(isOwner || isMember)) {
      return NextResponse.json({ error: 'Access denied' }, { status: 403 })
    }

    // 4) –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    const tasks = await prisma.task.findMany({
      where: { calendarId },
      orderBy: { date: 'asc' }
    })

    // 5) –û—Ç–¥–∞—ë–º –∏—Ö –∫–ª–∏–µ–Ω—Ç—É
    return NextResponse.json(tasks)
  } catch (err) {
    console.error('üî• Error in GET /api/tasks/list:', err)
    return NextResponse.json(
      { error: 'Internal Server Error' },
      { status: 500 }
    )
  }
}
