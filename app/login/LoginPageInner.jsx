'use client'

import { useState, useEffect } from 'react'
import { signIn } from 'next-auth/react'
import { useRouter, useSearchParams } from 'next/navigation'
import { Form, Input, Button, Alert } from 'antd'

export default function LoginPageInner() {
    const router = useRouter()
    const searchParams = useSearchParams()

    const errorCode = searchParams.get('error')

    const errorMessages = {
        CredentialsSignin: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å',
    }

    const [errorMessage, setErrorMessage] = useState < string | null > (null)

    useEffect(() => {
        if (errorCode) {
            setErrorMessage(errorMessages[errorCode] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
        }
    }, [errorCode])

    const onFinish = async ({ email, password }) => {
        try {
            console.log("üîë –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞:", { email, password }) // –ª–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ (–ø–∞—Ä–æ–ª—å –ª—É—á—à–µ —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ!)

            const res = await signIn('credentials', {
                email,
                password,
                redirect: false,
                callbackUrl: '/',
            })

            console.log("üì° –û—Ç–≤–µ—Ç –æ—Ç signIn:", res)

            if (!res) {
                console.error("‚ùå signIn –≤–µ—Ä–Ω—É–ª null/undefined")
                setErrorMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Ö–æ–¥: –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç')
                return
            }

            if (res.error) {
                console.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:", res.error)
                setErrorMessage(errorMessages[res.error] || `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: ${res.error}`)
                return
            }

            if (res.ok && res.url) {
                console.log("‚úÖ –í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω, —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞:", res.url)
                router.push(res.url)
                return
            }

            console.warn("‚ùì –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:", res)
            setErrorMessage('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞')
        } catch (err) {
            console.error("üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ signIn:", err)
            setErrorMessage('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞')
        }
    }

    return (
        <div className="auth-container">
            {errorMessage && (
                <Alert
                    type="error"
                    showIcon
                    style={{ marginBottom: 16 }}
                    message={errorMessage}
                />
            )}

            <Form
                name="login"
                layout="vertical"
                onFinish={onFinish}
            >
                <Form.Item
                    label="E-mail"
                    name="email"
                    rules={[
                        { required: true, message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ e-mail' },
                        { type: 'email', message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç e-mail' },
                    ]}
                >
                    <Input placeholder="user@example.com" />
                </Form.Item>

                <Form.Item
                    label="–ü–∞—Ä–æ–ª—å"
                    name="password"
                    rules={[{ required: true, message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å' }]}
                >
                    <Input.Password />
                </Form.Item>

                <Form.Item>
                    <Button type="primary" htmlType="submit" block>
                        –í–æ–π—Ç–∏
                    </Button>
                </Form.Item>

                <Form.Item>
                    <Button type="link" block onClick={() => router.push('/register')}>
                        –ï—â—ë –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞? –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
                    </Button>
                </Form.Item>
            </Form>
        </div>
    )
}
